package 剑指offer._03从尾到头打印链表;

import java.util.ArrayList;
import java.util.List;

class ListNode {
      int val;
      ListNode next = null;
      ListNode(int val) {
          this.val = val;
      }
}

class Solution {
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {

        ArrayList<Integer> list = new ArrayList<>();
        if(listNode == null)
            return list;
        //方法一   记录尾指针  两层循环

//        ListNode cur = listNode;
//        ListNode last = null;
//        while(last != listNode){
//            cur = listNode;
//            while(cur.next != last){
//                cur = cur.next;
//            }
//            list.add(cur.val);
//            last = cur;
//        }

        //方法二 将链表反转
        ListNode cur = listNode;
        ListNode pre = null;
        ListNode last = listNode.next;
        while(last != null){
            cur.next = pre;
            pre = cur;
            cur = last;
            last = cur.next;
        }
        cur.next = pre;
        while(cur != null){
            list.add(cur.val);
            cur = cur.next;
        }
        return list;
    }
}

public class Main {
    public static void main(String[] args) {
        ListNode listNode = new ListNode(67);
        listNode.next = new ListNode(0);

        ArrayList<Integer> list = new Solution().printListFromTailToHead(listNode);
    }
}
